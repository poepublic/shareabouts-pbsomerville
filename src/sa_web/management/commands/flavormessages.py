from django.core.management import call_command
from django.core.management.commands.makemessages import Command as MakeMessagesCommand
import os
import os.path

from sa_util.config import get_shareabouts_config
from django.conf import settings
from django.utils.timezone import now

try: str_type = basestring  # Python 2
except: str_type = str      # Python 3


def spit_to_file(data, outfile, exclude=[]):
    # If it's an object, recurse
    if isinstance(data, dict):
        for k, v in data.items():
            spit_to_file(v, outfile)

    # If it's a list, recurse on each item
    elif isinstance(data, list):
        for item in data:
            spit_to_file(item, outfile)

    # If it's a string, output it, unless it should be excluded
    elif isinstance(data, str_type):
        msg = parse_msg(data)
        if msg is not None:
            outfile.write('_(r"""' + msg + '""")\n')

def parse_msg(s):
    s = s.strip()
    if s.startswith('_(') and s.endswith(')'):
        return s[2:-1]


class Command(MakeMessagesCommand):
    def add_arguments(self, parser):
        super().add_arguments(parser)

        parser.add_argument(
            "--keep-config",
            action="store_true",
            help="Keep _config.translations.py file after making messages. Useful when debugging.",
        )

    def handle(self, *args, **options):
        # Load the config file; don't preprocess translation strings
        print("Loading config file from " + settings.SHAREABOUTS.get('CONFIG'))
        config = get_shareabouts_config(settings.SHAREABOUTS.get('CONFIG'), translate=False)

        # Generate an intermediary Python file
        mfile_path = os.path.join(config.path, '_config.translations.py')
        print("Writing intermediary file" + mfile_path)
        with open(mfile_path, 'w') as mfile:
            mfile.write("# This file is generated by the flavormessages command.\n")
            mfile.write("# Do not edit this file directly.\n")
            mfile.write(f"# Last generated at: {now()}\n\n")
            mfile.write("from django.utils.translation import gettext_lazy as _\n")
            spit_to_file(config.data, mfile)

        keep_mfile = options.pop('keep_config', False)

        try:
            call_command('makemessages', *args, **options)
        finally:
            if not keep_mfile:
                print("Cleaning up intermediary file" + mfile_path)
                os.unlink(mfile_path)
